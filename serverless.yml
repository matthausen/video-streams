service: video-streams

custom:
  tableName: 'users-streams-${self:provider.stage}'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UserStreamsDynamoDBTable", "Arn"]}
  environment:
    USERS_STREAMS_TABLE: ${self:custom.tableName}

functions:
  newUser:
    handler: newUser.newUser
    events:
      - http:
          path: /users
          method: post
  newStream:
    handler: newStream.newStream
    events:
      - http:
          path: /user/{userId}/streams
          method: post
  deleteStream:
    handler: deleteStream.deleteStream
    events:
      - http:
          path: /user/{userId}/stream/
          method: delete

resources: 
  Resources:
    UserStreamsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}

plugins:
  - serverless-offline